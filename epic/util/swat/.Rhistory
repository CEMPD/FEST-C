# Load required libraries
if(! require(M3)) stop("Required package M3 could not be loaded")
source("functions_epic2swat.r")
# get file names
#syear     <- Sys.getenv("START_YEAR")
beld4file <- Sys.getenv("DOMAIN_BELD4_NETCDF")
sitefile <- Sys.getenv("SITE_FILE")
year     <- Sys.getenv("SIM_YEAR")
day_dir  <- Sys.getenv("DAY_DIR")
region   <- Sys.getenv("REGION")
out_prefix <- Sys.getenv("OUTFILE_PREFIX")
print(paste(">>== daily file dir: ", day_dir))
print(paste(">>== site   file: ", sitefile))
print(paste(">>== output file prefix: ", out_prefix))
print("  ")
isleapy <- get_isleapyear(year)
# extract crops
temcrops <- Sys.getenv("CROPS")
temcrops <- toupper(temcrops)
crops    <- (strsplit(temcrops, " +"))[[1]]
print("  ")
print(">>== Layers and crops: ")
allcrops <- c("HAY", "ALFALFA", "OTHER_GRASS", "BARLEY", "EBEANS", "CORNG", "CORNS", "COTTON", "OATS", "PEANUTS", "POTATOES", "RICE", "RYE", "SORGHUMG", "SORGHUMS", "SOYBEANS", "SWHEAT", "WWHEAT", "OTHER_CROP", "CANOLA", "BEANS")
# calculate all crops
if ( "ALL" %in% crops ) crops  <- allcrops
print( crops )
indexs <- which(allcrops %in% crops)
tlays  <- c(indexs*2-1, indexs*2)
tlays  <- sort(tlays)
print( tlays )
# site file: GRIDID,XLONG,YLAT,ELEVATION,SLOPE_P,HUC8,REG10,STFIPS,CNTYFIPS,GRASS,CROPS,TOTAL,COUNTRY,CNTY_PROV
if ( ! file.exists(sitefile)) {
  print(paste("Error: ", sitefile, " doesn't exist. "))
  stop()
}
print(paste(">>== Reading Site table. ", sitefile) )
sitetable <- data.frame(read.csv(sitefile,header=TRUE, sep=",", skip=0, na.strings="NA", strip.white=TRUE, nrows=-1))
print(">>== Site table stuctures: ")
str(sitetable)
# get crop fraction
if ( ! file.exists(beld4file)) {
  print(paste("Error: ", beld4file, " doesn't exist. "))
  stop()
}
beldf <- nc_open(beld4file)
beld.var.names <- names(beldf$var)
print(beld.var.names)
frac.data <- get.M3.var(file = beld4file,
           var="CROPF")  # Time, crop_cat, row, col)
ncols <- beldf$dim$west_east$len
nrows <- beldf$dim$south_north$len
grids <- nrows*ncols
dx <- ncatt_get(beldf,0,"DX")$value
dy <- ncatt_get(beldf,0,"DY")$value
garea <- dx*dy
# set up id from bottomleft to upright
print(">>== domain information")
print(paste("cols:", ncols, "rows:", nrows, "dx:", dx, "dy:", dy))
id <- c(1:grids)
for ( i in tlays ) {
   # process daily NCD
   dayfile <- paste(day_dir, "/",i,".NCD", sep="")
   print(paste(">>==day file: ",dayfile, sep="") )
   # check if file exist
   if ( file.exists(dayfile))
   {
      print(paste("processing file ", dayfile))
   }
   else
   {
     print(paste("Waring: ", dayfile, " doesn't exist. "))
     next
   }
   # check if file is empty
   if ( file.info(dayfile)$size == 0 ) {
     print(paste("Waring: ", dayfile, " has zero line. "))
     next
   }
   # check if there are any data in file, if empty, go to next file.
   daytable <- data.frame(read.csv(dayfile,header=TRUE, sep=",", skip=0, na.strings="NA"))
   if ( length(daytable$Y) == 0 )  next
   # get grid ids, 11677030/1000; transfer date to Jdate
   daytable$GRIDID <- floor(daytable$RUN.NAME/1000)
   if ( grepl('FML', day_dir)>0 )  daytable$GRIDID <- floor(daytable$RUN.NAME/10000)
   indic <- daytable$Y == year
   daytable <- daytable[indic,]
   daytable$DATE   <- paste(daytable$M,daytable$D,daytable$Y, sep="/")
   daytable$DATE   <- as.Date(daytable$DATE, "%m/%d/%Y")
   daytable$DATE   <- format(daytable$DATE, "%m/%d/%Y")
   daytable$Floday <- daytable$Q+daytable$QDRN+daytable$SSF
   #daytable$No3day <- daytable$QNO3+daytable$SSFN+daytable$DRNN
   daytable$No3day <- daytable$QNO3+daytable$DRNN
   daytable$Minpday <- daytable$QAP+daytable$DRNP
   day.df <- data.frame(GRIDID=daytable$GRIDID,DATE=daytable$DATE,Floday=daytable$Floday,Sedday=daytable$MUSL,Orgnday=daytable$YON,Orgpday=daytable$YP,No3day=daytable$No3day,Nh3day=0.0,No2day=0.0,Minpday=daytable$Minpday,Cbodday=0.0,Disoxday=0.0,Chladay=0.0,Solpstday=0.0,Srbpstday=0.0,Bactpday=0.0,Bactlpday=0.0,Cmtl1day=0.0,Cmtl2day=0.0,Cmtl3day=0.0)
   print("Daily NCD: ")
   # percent file
   perc.df <- data.frame(GRIDID=id, PERC=as.vector(as.matrix(frac.data$data[,,i])))
   #rm(daytable)
   perc.df <- na.omit(perc.df)
   crop.df <- merge(x=day.df, y=perc.df, by="GRIDID" )
   #merge with site file to get HUC8 values
   out.df <- data.frame(GRIDID=sitetable$GRIDID, HUC8=sitetable$HUC8)
   out.df <- merge(x=crop.df, y=out.df, by="GRIDID" )
   out.df$AREA <- out.df$PERC*0.01*garea*0.0001
   #FLODAY - Contribution to streamflow for the day (m3)  -Q VAR(14) IN mm PER DAY, MUST BE CONVERTED TO M3. HECTARES IN GRID CELL IN HUC*10,000M2*Q/1000, one hectare=10000 square meter.
   out.df$Floday  <- out.df$Floday*out.df$AREA*10
   out.df$Sedday  <- out.df$Sedday*out.df$AREA
   out.df$Orgnday <- out.df$Orgnday*out.df$AREA
   out.df$Orgpday <- out.df$Orgpday*out.df$AREA
   out.df$No3day  <- out.df$No3day*out.df$AREA
   out.df$Minpday <- out.df$Minpday*out.df$AREA
   out.df$GRIDID <- NULL
   out.df$PERC   <- NULL
   out.df$AREA   <- NULL
   print("Daily NCD with HUC8: ")
   #str(out.df)
   temp.com.df <-aggregate(.~DATE+HUC8, data=out.df, sum, na.rm=TRUE)
   # crop data aggregate by date and HUC8
   if (firstfile)
   {
     com.df <- temp.com.df
     firstfile <- FALSE
   }
   if ( !firstfile)
   {
     temp.com.df<- rbind(com.df, temp.com.df)
     com.df <- aggregate(. ~ DATE+HUC8, data=temp.com.df, FUN=sum)
   }
}
quit
bye
b()
q()
